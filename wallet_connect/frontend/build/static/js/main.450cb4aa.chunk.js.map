{"version":3,"sources":["../node_modules/lit-js-sdk/build sync","litHelper.tsx","litComponent.tsx","MyComponent.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","_regeneratorRuntime","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","reject","invoke","record","result","__await","then","unwrapped","error","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","connectWeb3","_connectWeb","apply","arguments","_asyncToGenerator","_callee2","_ref","_ref$chainId","chainId","rpcUrls","chainName","_chainId","rpcUrl","provider","web3","accounts","account","_args2","_context2","LIT_CHAINS","walletconnect","package","WalletConnectProvider","options","infuraId","rpc","console","log","ethers","providers","Web3Provider","window","ethereum","send","listAccounts","toLowerCase","signMessageAsync","_ref2","_callee","signer","address","message","messageBytes","signature","_message","_context","toUtf8Bytes","JsonRpcSigner","hexlify","t0","includes","signMessage","_x","_x2","_x3","_x4","_signMessage","_callee3","_ref3","body","resp","msg","_context3","setTimeout","getSigner","verifyMessage","concat","alert","signAndSaveAuthMessage","_x5","_signAndSaveAuthMessage","_callee4","_ref4","resources","preparedMessage","signedResult","authSig","commsKeyPair","_context4","domain","globalThis","location","host","getAddress","uri","origin","version","SiweMessage","prepareMessage","sig","derivedVia","signedMessage","localStorage","setItem","JSON","stringify","nacl","box","keyPair","publicKey","naclUtil","encodeBase64","secretKey","checkAndSignEVMAuthMessage","_x6","_checkAndSignEVMAuthMessage","_callee5","_ref5","chain","switchChain","selectedChain","_yield$connectWeb","selectedChainId","data","mustResign","parsedSiwe","_context5","getNetwork","toString","request","params","t1","nativeCurrency","symbol","decimals","blockExplorerUrls","t2","getItem","parse","checkAndSignAuthMessage","_x7","_checkAndSignAuthMessage","_callee6","_ref6","_ref6$switchChain","_context6","contractAddress","vmType","polygon","fantom","xdai","bsc","arbitrum","avalanche","fuji","harmony","kovan","mumbai","goerli","ropsten","rinkeby","cronos","optimism","celo","aurora","eluvio","alfajores","xdc","evmos","evmosTestnet","LitJsSdk","require","algoveraAddresses","tokenAddress","getAuthSig","_getAuthSig","getClient","_getClient","litNodeClient","LitNodeClient","connect","encrypt","_encrypt","messageToEncrypt","accessControlConditions","_yield$LitJsSdk$encry","encryptedString","symmetricKey","encryptedSymmetricKey","encryptedRealString","standardContractType","parameters","returnValueTest","comparator","encryptString","saveEncryptionKey","blobToBase64String","uint8arrayToString","decrypt","_decrypt","decryptedString","base64StringToBlob","getEncryptionKey","toDecrypt","decryptString","provisionAccess2","_provisionAccess","contractType","randomUrlPath","client","_args5","tokenId","Math","random","substring","resourceId","baseUrl","path","orgId","role","extraData","saveSigningCondition","provisionAccess3","_provisionAccess2","_args6","provisionAccess","_x8","_provisionAccess3","_callee7","numTokens","_args7","_context7","requestJwt","_x9","_requestJwt","_callee8","_context8","getSignedToken","jwt","mintAlgovera","_x10","_x11","_x12","_mintAlgovera","_callee9","tknId","quantity","price","contract","methodSignature","txn","receipt","_context9","errorCode","Contract","A","abi","interface","encodeFunctionData","utils","parseUnits","to","from","sendTransaction","gasLimit","wait","txHash","transactionHash","mintingAddress","initToken","_x13","_x14","_x15","_x16","_initToken","_callee10","supply","_yield$connectWeb2","tx","txReceipt","_context10","createToken","parseInt","events","mintNftAlgovera","_x17","_x18","_x19","_mintNftAlgovera","_callee11","_yield$mintAlgovera","_context11","mintLIT","_x20","_mintLIT","_callee12","_yield$connectWeb3","_context12","LIT","mint","args","toNumber","mintNft","_x21","_mintNft","_callee13","_yield$mintLIT","_context13","login","_x22","_x23","_login","_callee14","_args14","_context14","mintAndLogin","_x24","_mintAndLogin","_callee15","_args15","_context15","mintAndLoginAlgovera","_x25","_x26","_x27","_mintAndLoginAlgovera","_callee16","_context16","getAccount","_getAccount","on","sendToken","_sendToken","to_address","send_token_amount","contract_address","contractAbiFragment","numberOfTokens","_args3","inputs","constant","outputs","payable","transfer","transferResult","dir","WalletConnect","_StreamlitComponentBa","_inherits","_super","_createSuper","_this","_classCallCheck","_len","Array","_key","walletAddress","transaction","isFocused","loggedIn","render","theme","props","style","borderStyling","primaryColor","backgroundColorStyling","border","outline","backgroundColor","color","borderRadius","height","React","createElement","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","onMouseOver","onMouseOut","_yield$encrypt","_yield$decrypt","lgn","_lgn","_lgn2","setState","Streamlit","setComponentValue","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","MyComponent","document","getElementById"],"mappings":"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","file":"static/js/main.450cb4aa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 272;","import WalletConnectProvider from \"@walletconnect/ethereum-provider\";\nimport {\n  Web3Provider,\n  JsonRpcSigner,\n  JsonRpcProvider,\n} from \"@ethersproject/providers\";\nimport { verifyMessage } from \"@ethersproject/wallet\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { getAddress } from \"@ethersproject/address\";\n\nimport { Contract } from \"@ethersproject/contracts\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { SiweMessage } from \"lit-siwe\";\n\nimport naclUtil from \"tweetnacl-util\";\nimport nacl from \"tweetnacl\";\nimport { ethers } from \"ethers\";\n\nimport LIT from \"lit-js-sdk/src/abis/LIT.json\";\n\n\n\nexport async function connectWeb3({ chainId = 1 } = {}) {\n    const rpcUrls: any = {};\n    // need to make it look like this:\n    // rpc: {\n    //   1: \"https://mainnet.mycustomnode.com\",\n    //   3: \"https://ropsten.mycustomnode.com\",\n    //   100: \"https://dai.poa.network\",\n    //   // ...\n    // },\n  \n    for (let i = 0; i < Object.keys(LIT_CHAINS).length; i++) {\n      const chainName = Object.keys(LIT_CHAINS)[i];\n      const chainId = LIT_CHAINS[chainName].chainId;\n      const rpcUrl = LIT_CHAINS[chainName].rpcUrls[0];\n      rpcUrls[chainId] = rpcUrl;\n    }\n  \n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          infuraId: \"cd614bfa5c2f4703b7ab0ec0547d9f81\",\n          rpc: rpcUrls,\n          chainId,\n        },\n      },\n    };\n  \n    console.log(\"getting provider via lit connect modal\");\n  \n    const provider: any = new ethers.providers.Web3Provider(window.ethereum, \"any\")\n  \n    console.log(\"got provider\", provider);\n    // const web3 = new Web3Provider(provider);\n    const web3 = provider;\n  \n    // const provider = await detectEthereumProvider();\n    // const web3 = new Web3Provider(provider);\n  \n    // trigger metamask popup\n    // await provider.enable();\n    await provider.send(\"eth_requestAccounts\", []);\n  \n    console.log(\"listing accounts\");\n    const accounts = await web3.listAccounts();\n    // const accounts = await provider.request({\n    //   method: \"eth_requestAccounts\",\n    //   params: [],\n    // });\n    console.log(\"accounts\", accounts);\n    const account = accounts[0].toLowerCase();\n  \n    return { web3, account };\n}\n  \n  // wrapper around signMessage that tries personal_sign first.  this is to fix a\n  // bug with walletconnect where just using signMessage was failing\nexport const signMessageAsync = async (signer: any, address: any, message: any) => {\n    const messageBytes = toUtf8Bytes(message);\n    if (signer instanceof JsonRpcSigner) {\n      try {\n        console.log(\"Signing with personal_sign\");\n        const signature = await signer.provider.send(\"personal_sign\", [\n          hexlify(messageBytes),\n          address.toLowerCase(),\n        ]);\n        return signature;\n      } catch (e) {\n        console.log(\n          \"Signing with personal_sign failed, trying signMessage as a fallback\"\n        );\n        let message: any\n        if (e instanceof Error) message = e.message\n        if (message.includes(\"personal_sign\")) {\n          return await signer.signMessage(messageBytes);\n        }\n        throw e;\n      }\n    } else {\n      console.log(\"signing with signMessage\");\n      return await signer.signMessage(messageBytes);\n    }\n};\n  \n  /**\n   * @typedef {Object} AuthSig\n   * @property {string} sig - The actual hex-encoded signature\n   * @property {string} derivedVia - The method used to derive the signature. Typically \"web3.eth.personal.sign\"\n   * @property {string} signedMessage - The message that was signed\n   * @property {string} address - The crypto wallet address that signed the message\n   */\n  \n   export async function signMessage({ body, web3, account }: any) {\n    if (!web3 || !account) {\n      let resp = await connectWeb3();\n      web3 = resp.web3;\n      account = resp.account;\n    }\n  \n    console.log(\"pausing...\");\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    console.log(\"signing with \", account);\n    // const signature = await web3.getSigner().signMessage(body);\n    const signature = await signMessageAsync(web3.getSigner(), account, body);\n    //.request({ method: 'personal_sign', params: [account, body] })\n    const address = verifyMessage(body, signature).toLowerCase();\n  \n    console.log(\"Signature: \", signature);\n    console.log(\"recovered address: \", address);\n  \n    if (address !== account) {\n      const msg = `ruh roh, the user signed with a different address (${address}) then they\\'re using with web3 (${account}).  this will lead to confusion.`;\n      console.error(msg);\n      alert(\n        \"something seems to be wrong with your wallets message signing.  maybe restart your browser or your wallet.  your recovered sig address does not match your web3 account address\"\n      );\n      throw new Error(msg);\n    }\n  \n    return { signature, address };\n  }\n  \n  \n  /**\n   * Sign the auth message with the user's wallet, and store it in localStorage.  Called by checkAndSignAuthMessage if the user does not have a signature stored.\n   * @param {Object} params\n   * @param {Web3Provider} params.web3 An ethers.js Web3Provider instance\n   * @param {string} params.account The account to sign the message with\n   * @returns {AuthSig} The AuthSig created or retrieved\n  */\n export async function signAndSaveAuthMessage({\n    web3,\n    account,\n    chainId,\n    resources,\n  }: any) {\n    // const { chainId } = await web3.getNetwork();\n  \n    const preparedMessage: any = {\n      domain: globalThis.location.host,\n      address: getAddress(account), // convert to EIP-55 format or else SIWE complains\n      uri: globalThis.location.origin,\n      version: \"1\",\n      chainId,\n    };\n  \n    if (resources && resources.length > 0) {\n      preparedMessage.resources = resources;\n    }\n  \n    const message = new SiweMessage(preparedMessage);\n  \n    const body = message.prepareMessage();\n  \n    const signedResult = await signMessage({\n      body,\n      web3,\n      account,\n    });\n  \n    const authSig = {\n      sig: signedResult.signature,\n      derivedVia: \"web3.eth.personal.sign\",\n      signedMessage: body,\n      address: signedResult.address,\n    };\n  \n    localStorage.setItem(\"lit-auth-signature\", JSON.stringify(authSig));\n    // store a keypair in localstorage for communication with sgx\n    const commsKeyPair = nacl.box.keyPair();\n    localStorage.setItem(\n      \"lit-comms-keypair\",\n      JSON.stringify({\n        publicKey: naclUtil.encodeBase64(commsKeyPair.publicKey),\n        secretKey: naclUtil.encodeBase64(commsKeyPair.secretKey),\n      })\n    );\n    console.log(\"generated and saved lit-comms-keypair\");\n    return authSig;\n  }\n  \nexport async function checkAndSignEVMAuthMessage({\n    chain,\n    resources,\n    switchChain,\n  }: any) {\n    const selectedChain = LIT_CHAINS[chain];\n    const { web3, account } = await connectWeb3({\n      chainId: selectedChain.chainId,\n    });\n    console.log(`got web3 and account: ${account}`);\n  \n    let chainId;\n    try {\n      const resp = await web3.getNetwork();\n      chainId = resp.chainId;\n    } catch (e) {\n      // couldn't get chainId.  throw the incorrect network error\n      console.log(\"getNetwork threw an exception\", e);\n      // throwError({\n      //   message: `Incorrect network selected.  Please switch to the ${chain} network in your wallet and try again.`,\n      //   name: \"WrongNetworkException\",\n      //   errorCode: \"wrong_network\",\n      // });\n    }\n    let selectedChainId = \"0x\" + selectedChain.chainId.toString(\"16\");\n    console.log(\"chainId from web3\", chainId);\n    console.log(\n      `checkAndSignAuthMessage with chainId ${chainId} and chain set to ${chain} and selectedChain is `,\n      selectedChain\n    );\n    if (chainId !== selectedChain.chainId && switchChain) {\n      if (web3.provider instanceof WalletConnectProvider) {\n        // this chain switching won't work.  alert the user that they need to switch chains manually\n        // throwError({\n        //   message: `Incorrect network selected.  Please switch to the ${chain} network in your wallet and try again.`,\n        //   name: \"WrongNetworkException\",\n        //   errorCode: \"wrong_network\",\n        // });\n        return;\n      }\n      try {\n        console.log(\"trying to switch to chainId\", selectedChainId);\n        await web3.provider.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: selectedChainId }],\n        });\n      } catch (switchError) {\n        console.log(\"error switching to chainId\", switchError);\n        // This error code indicates that the chain has not been added to MetaMask.\n        // if (switchError.code === 4902) {\n          try {\n            const data = [\n              {\n                chainId: selectedChainId,\n                chainName: selectedChain.name,\n                nativeCurrency: {\n                  name: selectedChain.name,\n                  symbol: selectedChain.symbol,\n                  decimals: selectedChain.decimals,\n                },\n                rpcUrls: selectedChain.rpcUrls,\n                blockExplorerUrls: selectedChain.blockExplorerUrls,\n              },\n            ];\n            await web3.provider.request({\n              method: \"wallet_addEthereumChain\",\n              params: data,\n            });\n          } catch (addError) {\n            // handle \"add\" error\n            // if (addError.code === -32601) {\n            //   // metamask code indicating \"no such method\"\n            //   // throwError({\n            //   //   message: `Incorrect network selected.  Please switch to the ${chain} network in your wallet and try again.`,\n            //   //   name: \"WrongNetworkException\",\n            //   //   errorCode: \"wrong_network\",\n            //   // });\n            // } else {\n              throw addError;\n            // }\n          }\n        // } else {\n        //   if (switchError.code === -32601) {\n        //     // metamask code indicating \"no such method\"\n        //     // throwError({\n        //     //   message: `Incorrect network selected.  Please switch to the ${chain} network in your wallet and try again.`,\n        //     //   name: \"WrongNetworkException\",\n        //     //   errorCode: \"wrong_network\",\n        //     // });\n        //   } else {\n        //     throw switchError;\n        //   }\n        // }\n      }\n      // we may have switched the chain to the selected chain.  set the chainId accordingly\n      chainId = selectedChain.chainId;\n    }\n    console.log(\"checking if sig is in local storage\");\n    let authSig: any = localStorage.getItem(\"lit-auth-signature\");\n    if (!authSig) {\n      console.log(\"signing auth message because sig is not in local storage\");\n      await signAndSaveAuthMessage({\n        web3,\n        account,\n        chainId,\n        resources,\n      });\n      authSig = localStorage.getItem(\"lit-auth-signature\");\n    }\n    authSig = JSON.parse(authSig);\n    // make sure we are on the right account\n    if (account !== authSig.address) {\n      console.log(\n        \"signing auth message because account is not the same as the address in the auth sig\"\n      );\n      await signAndSaveAuthMessage({\n        web3,\n        account,\n        chainId: selectedChain.chainId,\n        resources,\n      });\n      authSig = localStorage.getItem(\"lit-auth-signature\");\n      authSig = JSON.parse(authSig);\n    } else {\n      // check the resources of the sig and re-sign if they don't match\n      let mustResign = false;\n      try {\n        const parsedSiwe = new SiweMessage(authSig.signedMessage);\n        console.log(\"parsedSiwe.resources\", parsedSiwe.resources);\n  \n        if (JSON.stringify(parsedSiwe.resources) !== JSON.stringify(resources)) {\n          console.log(\n            \"signing auth message because resources differ from the resources in the auth sig\"\n          );\n          mustResign = true;\n        } else if (parsedSiwe.address !== getAddress(parsedSiwe.address)) {\n          console.log(\n            \"signing auth message because parsedSig.address is not equal to the same address but checksummed.  This usually means the user had a non-checksummed address saved and so they need to re-sign.\"\n          );\n          mustResign = true;\n        }\n      } catch (e) {\n        console.log(\"error parsing siwe sig.  making the user sign again: \", e);\n        mustResign = true;\n      }\n      if (mustResign) {\n        await signAndSaveAuthMessage({\n          web3,\n          account,\n          chainId: selectedChain.chainId,\n          resources,\n        });\n        authSig = localStorage.getItem(\"lit-auth-signature\");\n        authSig = JSON.parse(authSig);\n      }\n    }\n    console.log(\"got auth sig\", authSig);\n    return authSig;\n  }\n  \nexport async function checkAndSignAuthMessage({\n    chain,\n    resources,\n    switchChain = true,\n  }: any) {\n    return checkAndSignEVMAuthMessage({ chain, resources, switchChain });\n  }\n\n\n\n\n\nexport const LIT_CHAINS: any = {\n    ethereum: {\n      contractAddress: \"0xA54F7579fFb3F98bd8649fF02813F575f9b3d353\",\n      chainId: 1,\n      name: \"Ethereum\",\n      symbol: \"ETH\",\n      decimals: 18,\n      type: \"ERC1155\",\n      rpcUrls: [\n        \"https://eth-mainnet.alchemyapi.io/v2/EuGnkVlzVoEkzdg0lpCarhm8YHOxWVxE\",\n      ],\n      blockExplorerUrls: [\"https://etherscan.io\"],\n      vmType: \"EVM\",\n    },\n    polygon: {\n      contractAddress: \"0x7C7757a9675f06F3BE4618bB68732c4aB25D2e88\",\n      chainId: 137,\n      name: \"Polygon\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      rpcUrls: [\"https://polygon-rpc.com\"],\n      blockExplorerUrls: [\"https://explorer.matic.network\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    fantom: {\n      contractAddress: \"0x5bD3Fe8Ab542f0AaBF7552FAAf376Fd8Aa9b3869\",\n      chainId: 250,\n      name: \"Fantom\",\n      symbol: \"FTM\",\n      decimals: 18,\n      rpcUrls: [\"https://rpcapi.fantom.network\"],\n      blockExplorerUrls: [\"https://ftmscan.com\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    xdai: {\n      contractAddress: \"0xDFc2Fd83dFfD0Dafb216F412aB3B18f2777406aF\",\n      chainId: 100,\n      name: \"xDai\",\n      symbol: \"xDai\",\n      decimals: 18,\n      rpcUrls: [\"https://rpc.gnosischain.com\"],\n      blockExplorerUrls: [\" https://blockscout.com/xdai/mainnet\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    bsc: {\n      contractAddress: \"0xc716950e5DEae248160109F562e1C9bF8E0CA25B\",\n      chainId: 56,\n      name: \"Binance Smart Chain\",\n      symbol: \"BNB\",\n      decimals: 18,\n      rpcUrls: [\"https://bsc-dataseed.binance.org/\"],\n      blockExplorerUrls: [\" https://bscscan.com/\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    arbitrum: {\n      contractAddress: \"0xc716950e5DEae248160109F562e1C9bF8E0CA25B\",\n      chainId: 42161,\n      name: \"Arbitrum\",\n      symbol: \"AETH\",\n      decimals: 18,\n      type: \"ERC1155\",\n      rpcUrls: [\"https://arb1.arbitrum.io/rpc\"],\n      blockExplorerUrls: [\"https://arbiscan.io/\"],\n      vmType: \"EVM\",\n    },\n    avalanche: {\n      contractAddress: \"0xBB118507E802D17ECDD4343797066dDc13Cde7C6\",\n      chainId: 43114,\n      name: \"Avalanche\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      type: \"ERC1155\",\n      rpcUrls: [\"https://api.avax.network/ext/bc/C/rpc\"],\n      blockExplorerUrls: [\"https://snowtrace.io/\"],\n      vmType: \"EVM\",\n    },\n    fuji: {\n      contractAddress: \"0xc716950e5DEae248160109F562e1C9bF8E0CA25B\",\n      chainId: 43113,\n      name: \"Avalanche FUJI Testnet\",\n      symbol: \"AVAX\",\n      decimals: 18,\n      type: \"ERC1155\",\n      rpcUrls: [\"https://api.avax-test.network/ext/bc/C/rpc\"],\n      blockExplorerUrls: [\"https://testnet.snowtrace.io/\"],\n      vmType: \"EVM\",\n    },\n    harmony: {\n      contractAddress: \"0xBB118507E802D17ECDD4343797066dDc13Cde7C6\",\n      chainId: 1666600000,\n      name: \"Harmony\",\n      symbol: \"ONE\",\n      decimals: 18,\n      type: \"ERC1155\",\n      rpcUrls: [\"https://api.harmony.one\"],\n      blockExplorerUrls: [\"https://explorer.harmony.one/\"],\n      vmType: \"EVM\",\n    },\n    kovan: {\n      contractAddress: \"0x9dB60Db3Dd9311861D87D33B0463AaD9fB4bb0E6\",\n      chainId: 42,\n      name: \"Kovan\",\n      symbol: \"ETH\",\n      decimals: 18,\n      rpcUrls: [\"https://kovan.infura.io/v3/ddf1ca3700f34497bca2bf03607fde38\"],\n      blockExplorerUrls: [\"https://kovan.etherscan.io\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    mumbai: {\n      contractAddress: \"0xc716950e5DEae248160109F562e1C9bF8E0CA25B\",\n      chainId: 80001,\n      name: \"Mumbai\",\n      symbol: \"MATIC\",\n      decimals: 18,\n      rpcUrls: [\n        \"https://rpc-mumbai.maticvigil.com/v1/96bf5fa6e03d272fbd09de48d03927b95633726c\",\n      ],\n      blockExplorerUrls: [\"https://mumbai.polygonscan.com\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    goerli: {\n      contractAddress: \"0xc716950e5DEae248160109F562e1C9bF8E0CA25B\",\n      chainId: 5,\n      name: \"Goerli\",\n      symbol: \"ETH\",\n      decimals: 18,\n      rpcUrls: [\"https://goerli.infura.io/v3/96dffb3d8c084dec952c61bd6230af34\"],\n      blockExplorerUrls: [\"https://goerli.etherscan.io\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    ropsten: {\n      contractAddress: \"0x61544f0AE85f8fed6Eb315c406644eb58e15A1E7\",\n      chainId: 3,\n      name: \"Ropsten\",\n      symbol: \"ETH\",\n      decimals: 18,\n      rpcUrls: [\"https://ropsten.infura.io/v3/96dffb3d8c084dec952c61bd6230af34\"],\n      blockExplorerUrls: [\"https://ropsten.etherscan.io\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    rinkeby: {\n      contractAddress: \"0xc716950e5deae248160109f562e1c9bf8e0ca25b\",\n      chainId: 4,\n      name: \"Rinkeby\",\n      symbol: \"ETH\",\n      decimals: 18,\n      rpcUrls: [\"https://rinkeby.infura.io/v3/96dffb3d8c084dec952c61bd6230af34\"],\n      blockExplorerUrls: [\"https://rinkeby.etherscan.io\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    cronos: {\n      contractAddress: \"0xc716950e5DEae248160109F562e1C9bF8E0CA25B\",\n      chainId: 25,\n      name: \"Cronos\",\n      symbol: \"CRO\",\n      decimals: 18,\n      rpcUrls: [\"https://evm-cronos.org\"],\n      blockExplorerUrls: [\"https://cronos.org/explorer/\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    optimism: {\n      contractAddress: \"0xbF68B4c9aCbed79278465007f20a08Fa045281E0\",\n      chainId: 10,\n      name: \"Optimism\",\n      symbol: \"ETH\",\n      decimals: 18,\n      rpcUrls: [\"https://mainnet.optimism.io\"],\n      blockExplorerUrls: [\"https://optimistic.etherscan.io\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    celo: {\n      contractAddress: \"0xBB118507E802D17ECDD4343797066dDc13Cde7C6\",\n      chainId: 42220,\n      name: \"Celo\",\n      symbol: \"CELO\",\n      decimals: 18,\n      rpcUrls: [\"https://forno.celo.org\"],\n      blockExplorerUrls: [\"https://explorer.celo.org\"],\n      type: \"ERC1155\",\n      vmType: \"EVM\",\n    },\n    aurora: {\n      contractAddress: null,\n      chainId: 1313161554,\n      name: \"Aurora\",\n      symbol: \"ETH\",\n      decimals: 18,\n      rpcUrls: [\"https://mainnet.aurora.dev\"],\n      blockExplorerUrls: [\"https://aurorascan.dev\"],\n      type: null,\n      vmType: \"EVM\",\n    },\n    eluvio: {\n      contractAddress: null,\n      chainId: 955305,\n      name: \"Eluvio\",\n      symbol: \"ELV\",\n      decimals: 18,\n      rpcUrls: [\"https://host-76-74-28-226.contentfabric.io/eth\"],\n      blockExplorerUrls: [\"https://explorer.eluv.io\"],\n      type: null,\n      vmType: \"EVM\",\n    },\n    alfajores: {\n      contractAddress: null,\n      chainId: 44787,\n      name: \"Alfajores\",\n      symbol: \"CELO\",\n      decimals: 18,\n      rpcUrls: [\"https://alfajores-forno.celo-testnet.org\"],\n      blockExplorerUrls: [\"https://alfajores-blockscout.celo-testnet.org\"],\n      type: null,\n      vmType: \"EVM\",\n    },\n    xdc: {\n      contractAddress: null,\n      chainId: 50,\n      name: \"XDC Blockchain\",\n      symbol: \"XDC\",\n      decimals: 18,\n      rpcUrls: [\"https://rpc.xinfin.network\"],\n      blockExplorerUrls: [\"https://explorer.xinfin.network\"],\n      type: null,\n      vmType: \"EVM\",\n    },\n    evmos: {\n      contractAddress: null,\n      chainId: 9001,\n      name: \"EVMOS\",\n      symbol: \"EVMOS\",\n      decimals: 18,\n      rpcUrls: [\"https://eth.bd.evmos.org:8545\"],\n      blockExplorerUrls: [\"https://evm.evmos.org\"],\n      type: null,\n      vmType: \"EVM\",\n    },\n    evmosTestnet: {\n      contractAddress: null,\n      chainId: 9000,\n      name: \"EVMOS Testnet\",\n      symbol: \"EVMOS\",\n      decimals: 18,\n      rpcUrls: [\"https://eth.bd.evmos.dev:8545\"],\n      blockExplorerUrls: [\"https://evm.evmos.dev\"],\n      type: null,\n      vmType: \"EVM\",\n    },\n  };","import { Contract } from \"@ethersproject/contracts\";\n\nimport { ethers } from \"ethers\";\n\nimport LIT from \"lit-js-sdk/src/abis/LIT.json\";\nimport A from \"./Algovera.json\"\nimport { LIT_CHAINS, checkAndSignAuthMessage, checkAndSignEVMAuthMessage, connectWeb3 } from \"./litHelper\";\n\nconst LitJsSdk = require(\"lit-js-sdk\");\n\nconst algoveraAddresses: any = {\n  ethereum: \"0xdE0D03F110B9fe57C8253e92f400e37FbbA53095\",\n  goerli: \"0x1f9824245b90c4e33d9866d7BA13F1902eF8654C\",\n  polygon: \"0x35cA20b4c393dD3C425565E0DC2059Eebe9e1422\",\n  mumbai: \"0x35cA20b4c393dD3C425565E0DC2059Eebe9e1422\",\n}\n\nfunction getAddress(chainName: string) {\n  let tokenAddress: string;\n  if (chainName == \"mumbai\") {\n    tokenAddress = algoveraAddresses.mumbai;\n  } else if (chainName == \"goerli\") {\n    tokenAddress = algoveraAddresses.goerli;\n  } else if (chainName == \"ethereum\") {\n    tokenAddress = algoveraAddresses.ethereum;\n  } else if (chainName == \"polygon\") {\n    tokenAddress = algoveraAddresses.polygon\n  } else {\n    tokenAddress = \"\";\n    throw new Error(\"Chain name not specified\")\n  }\n  return tokenAddress\n} \n\n// Lit Protocol Integration\n\n  // Set up the middleware stack\n  async function getAuthSig(chain: string) {\n    const authSig = await checkAndSignAuthMessage({chain: chain});\n    window.authSig = authSig;\n    return authSig\n  }\n  \n  async function getClient() {\n    const litNodeClient = new LitJsSdk.LitNodeClient();\n    await litNodeClient.connect();\n    window.litNodeClient = litNodeClient;\n  \n    return litNodeClient\n  }\n  \n  \nexport async function encrypt(messageToEncrypt: string, chainName: string) {\n    const litNodeClient = await getClient();\n    const accessControlConditions = [\n      {\n        contractAddress: '0x68085453B798adf9C09AD8861e0F0da96B908d81',\n        standardContractType: \"ERC1155\",\n        chain: chainName,\n        method: \"balanceOf\",\n        parameters: [\":userAddress\", '0', '1', '2', '3', '4', '5' ],\n        returnValueTest: {\n          comparator: \">\",\n          value: \"0\",\n        },\n      },\n    ];\n    console.log(\"getting authSig\");\n    const authSig = await getAuthSig(chainName);\n    console.log(\"got authSig \", authSig);\n    const chain = chainName;\n  \n    // encrypting content -> this we can change to our own content\n    const { encryptedString, symmetricKey } = await LitJsSdk.encryptString(\n        messageToEncrypt\n    );\n    // saving encrypted content to Lit Node\n    const encryptedSymmetricKey = await window.litNodeClient.saveEncryptionKey({\n      accessControlConditions,\n      symmetricKey,\n      authSig,\n      chain,\n    });\n\n    window.encryptedString = encryptedString;\n    const encryptedRealString = await LitJsSdk.blobToBase64String(encryptedString)\n\n  \n    return {\n      encryptedRealString,\n      encryptedSymmetricKey: LitJsSdk.uint8arrayToString(encryptedSymmetricKey, \"base16\")\n    }\n}\n  \n  \nexport async function decrypt(encryptedRealString: string, encryptedSymmetricKey: string, chainName: string) {\n    console.log(\"Decrypting...\")\n    const encryptedString = LitJsSdk.base64StringToBlob(encryptedRealString)\n    const litNodeClient = await getClient();\n  \n    const authSig = await getAuthSig(chainName);\n  \n    const chain = chainName;\n    window.accessControlConditions = [\n      {\n        contractAddress: '0x68085453B798adf9C09AD8861e0F0da96B908d81',\n        standardContractType: \"ERC1155\",\n        chain: chainName,\n        method: \"balanceOf\",\n        parameters: [\":userAddress\", '0', '1', '2', '3', '4', '5' ],\n        returnValueTest: {\n          comparator: \">\",\n          value: \"0\",\n        },\n      },\n    ];\n    const accessControlConditions = window.accessControlConditions;\n  \n    const symmetricKey = await litNodeClient.getEncryptionKey({\n      accessControlConditions,\n      toDecrypt: encryptedSymmetricKey,\n      chain,\n      authSig\n    })\n  \n    const decryptedString = await LitJsSdk.decryptString(\n      encryptedString,\n      symmetricKey\n    );\n  \n    return { decryptedString }\n}\n\nasync function provisionAccess2(contractType: string=\"ERC1155\") {\n      window.accessControlConditions = [\n        {\n          contractAddress: LitJsSdk.LIT_CHAINS[window.chain].contractAddress,\n          standardContractType: contractType,\n          chain: window.chain,\n          method: 'balanceOf',\n          parameters: [\n            ':userAddress',\n            window.tokenId.toString()\n          ],\n          returnValueTest: {\n            comparator: '>',\n            value: '0'\n          }\n        }\n      ]\n      // generate a random path because you can only provision access to a given path once\n      const randomUrlPath = \"/\" + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      window.resourceId = {\n        baseUrl: 'my-dynamic-content-server.com',\n        path: randomUrlPath, // this would normally be your url path, like \"/webpage.html\" for example\n        orgId: \"\",\n        role: \"\",\n        extraData: \"\"\n      }\n\n      const client = new LitJsSdk.LitNodeClient();\n        await client.connect();\n        window.litNodeClient = client;\n        console.log(\"Lit client connected\", client);\n        console.log(\"Window.litNodeClient\", window.litNodeClient);\n\n      await client.saveSigningCondition({\n        accessControlConditions: window.accessControlConditions,\n        chain: window.chain,\n        authSig: window.authSig,\n        resourceId: window.resourceId\n      })\n    }\n\nasync function provisionAccess3(contractType: string=\"ERC1155\", contractAddress: string, tokenId: any, chainName: string) {\n\n      window.accessControlConditions = [\n        {\n          contractAddress: contractAddress,\n          standardContractType: contractType,\n          chain: chainName,\n          method: 'balanceOf',\n          parameters: [\n            ':userAddress',\n            tokenId,\n          ],\n          returnValueTest: {\n            comparator: '>',\n            value: '0'\n          }\n        }\n      ]\n      // generate a random path because you can only provision access to a given path once\n      const randomUrlPath = \"/\" + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      window.resourceId = {\n        baseUrl: 'my-dynamic-content-server.com',\n        path: randomUrlPath, // this would normally be your url path, like \"/webpage.html\" for example\n        orgId: \"\",\n        role: \"\",\n        extraData: \"\"\n      }\n\n      const client = new LitJsSdk.LitNodeClient();\n        await client.connect();\n        window.litNodeClient = client;\n        console.log(\"Lit client connected\", client);\n        console.log(\"Window.litNodeClient\", window.litNodeClient);\n\n      await client.saveSigningCondition({\n        accessControlConditions: window.accessControlConditions,\n        chain: chainName,\n        authSig: window.authSig,\n        resourceId: window.resourceId\n      })\n}\n\nasync function provisionAccess(contractAddress: string, chainName: string, contractType: string=\"ERC1155\", numTokens: string=\"0\") {\n    window.accessControlConditions = [\n      {\n        contractAddress: contractAddress,\n        standardContractType: contractType,\n        chain: chainName,\n        method: \"balanceOf\",\n        parameters: [\":userAddress\", '0', '1', '2', '3', '4', '5' ],\n        returnValueTest: {\n          comparator: \">\",\n          value: numTokens,\n        },\n      },\n    ];\n    // generate a random path because you can only provision access to a given path once\n    const randomUrlPath =\n      \"/\" +\n      Math.random().toString(36).substring(2, 15) +\n      Math.random().toString(36).substring(2, 15);\n    window.resourceId = {\n      baseUrl: \"lit-estuary-storage.herokuapp.com/\",\n      path: randomUrlPath, // this would normally be our url path, like \"/algovera.storage\" for example\n      orgId: \"\",\n      role: \"\",\n      extraData: \"\",\n    };\n\n    const client = new LitJsSdk.LitNodeClient();\n    await client.connect();\n    window.litNodeClient = client;\n    console.log(\"Lit client connected\", client);\n    console.log(\"Window.litNodeClient\", window.litNodeClient);\n\n\n    await client.saveSigningCondition({\n      accessControlConditions: window.accessControlConditions,\n      chain: chainName,\n      authSig: window.authSig,\n      resourceId: window.resourceId,\n    });\n}\n\nasync function requestJwt(chainName: string) {\n    console.log(\"IN REQUEST JWT\")\n    const client = new LitJsSdk.LitNodeClient();\n    await client.connect();\n    window.litNodeClient = client;\n    console.log(\"Lit client connected\", client);\n    console.log(\"Window.litNodeClient\", window.litNodeClient);\n\n      console.log(\"Checking params for jwt\")\n      console.log(\"window.accessControlConditions is \", window.accessControlConditions)\n      console.log(\"chainName is \", chainName)\n      console.log(\"Auth Sig is \", window.authSig)\n      console.log(\"window.resourceId is \", window.resourceId)\n\n    window.jwt = await client.getSignedToken({\n      accessControlConditions: window.accessControlConditions,\n      chain: chainName,\n      authSig: window.authSig,\n      resourceId: window.resourceId,\n    });\n    console.log(\"What is window.jwt? \", window.jwt)\n\n}\n\n// async function visitProtectedServer(jwt) {\n//     window.location = \"/?jwt=\" + window.jwt;\n// }\n\n\nasync function mintAlgovera(tknId: any, quantity: number, price: string) {\n  console.log(`minting ${quantity} tokens on ${window.chain}`);\n  try {\n    const chain = window.chain\n    const authSig = await checkAndSignEVMAuthMessage({\n      chain,\n      switchChain: true,\n    });\n    if (authSig.errorCode) {\n      return authSig;\n    }\n    const { web3, account } = await connectWeb3();\n    const signer = web3.getSigner()\n\n    const tokenAddress = getAddress(window.chain)\n\n    if (!tokenAddress) {\n      console.log(\"No token address for this chain.  It's not supported via MintLIT.\");\n      return;\n    }\n\n    const contract = new Contract(tokenAddress, A.abi, web3.getSigner());\n    console.log(\"sending to chain...\");\n    console.log(\"line 940\")\n    const methodSignature = await contract.interface.encodeFunctionData(\n      \"mint\",\n      [tknId] \n    );\n    console.log(\"Got here\")\n    console.log(\"Price is \", price)\n    console.log(\"Price parsed in ehters is \", ethers.utils.parseUnits(price))\n    const txnParams = {\n      to: tokenAddress,\n      value: ethers.utils.parseUnits(price), \n      data: methodSignature,\n      from: account,\n    };\n    console.log(\"Got txnParams\")\n    // const gasEstimate = await signer.estimateGas(txnParams);\n    // console.log(\"Gas estimate:\", gasEstimate.toString());\n    \n    // send transaction\n    const txn = await signer.sendTransaction({\n      to: tokenAddress,\n      value: ethers.utils.parseUnits(price), \n      data: methodSignature,\n      gasLimit: 3e6, //gasEstimate,\n    });\n    console.log(\"Transaction:\", txn);\n    console.log(\"sent to chain.  waiting to be mined...\");\n\n    // wait for transaction to be mined\n    const receipt = await txn.wait();\n    console.log(\"Receipt:\", receipt);\n\n\n\n    \n    \n    // const tx = await contract.mint(tknId, quantity);\n    // console.log(\"sent to chain.  waiting to be mined...\");\n    // const txReceipt = await tx.wait();\n    // console.log(\"txReceipt: \", txReceipt);\n    // const tokenId = txReceipt.events[0].args[3].toNumber();\n    return {\n      txHash: receipt.transactionHash,\n      tknId,\n      tokenAddress,\n      mintingAddress: account,\n      authSig,\n    };\n  } catch (error) {\n    console.log(error);\n    return { errorCode: \"unknown_error\" };\n  }\n}\n\nexport async function initToken(price: string, supply: number, uri: string, chainName: string) {\n  try {\n    const { web3, account } = await connectWeb3();\n    const tokenAddress = getAddress(chainName)\n    \n    const contract = new Contract(tokenAddress, A.abi, web3.getSigner());\n    console.log(\"sending to chain...\");\n    const tx = await contract.createToken(ethers.utils.parseUnits(price), uri, supply); //createToken(100, uri, 1000)\n    console.log(\"sent to chain.  waiting to be mined...\");\n    const txReceipt = await tx.wait();\n    console.log(\"txReceipt: \", txReceipt);\n    const tokenId = parseInt(txReceipt.events[0].data, 16)\n    return tokenId;\n  } catch (error) {\n    console.log(error);\n    return { errorCode: \"unknown_error\" };\n  }\n}\n\nasync function mintNftAlgovera(chainName: string, tknId: any, price: string) {\n  console.log(\"Minting NFT, please wait for the tx to confirm...\")\n\n  window.chain = chainName\n\n  const {\n    txHash,\n    tokenId,\n    tokenAddress,\n    mintingAddress,\n    authSig\n  } = await mintAlgovera(tknId, 1, price)\n  // window.tokenId = tokenId\n  // window.tokenAddress = tokenAddress\n  // window.authSig = authSig\n  // console.log(\"Algovera NFT has been minted and the authSig is \", window.authSig)\n\n  return txHash\n}\n\n\n\n/**\n * This function mints a LIT using our pre-deployed token contracts.  You may use our contracts, or you may supply your own.  Our contracts are ERC1155 tokens on Polygon and Ethereum.  Using these contracts is the easiest way to get started.\n * @param {Object} params\n * @param {string} params.chain The chain to mint on.  \"ethereum\" and \"polygon\" are currently supported.\n * @param {number} params.quantity The number of tokens to mint.  Note that these will be fungible, so they will not have serial numbers.\n * @returns {Object} The txHash, tokenId, tokenAddress, mintingAddress, and authSig.\n */\nasync function mintLIT({ chain, quantity }: any) {\n    console.log(`minting ${quantity} tokens on ${chain}`);\n    try {\n      const authSig = await checkAndSignEVMAuthMessage({\n        chain,\n        switchChain: true,\n      });\n      if (authSig.errorCode) {\n        return authSig;\n      }\n      const { web3, account } = await connectWeb3();\n      const tokenAddress = LIT_CHAINS[chain].contractAddress;\n      if (!tokenAddress) {\n        console.log(\"No token address for this chain.  It's not supported via MintLIT.\");\n        return;\n      }\n      const contract = new Contract(tokenAddress, LIT.abi, web3.getSigner());\n      console.log(\"sending to chain...\");\n      const tx = await contract.mint(quantity);\n      console.log(\"sent to chain.  waiting to be mined...\");\n      const txReceipt = await tx.wait();\n      console.log(\"txReceipt: \", txReceipt);\n      const tokenId = txReceipt.events[0].args[3].toNumber();\n      return {\n        txHash: txReceipt.transactionHash,\n        tokenId,\n        tokenAddress,\n        mintingAddress: account,\n        authSig,\n      };\n    } catch (error) {\n      console.log(error);\n      return { errorCode: \"unknown_error\" };\n    }\n  }\n\nasync function mintNft(chainName: string) {\n    console.log(\"Minting NFT, please wait for the tx to confirm...\")\n\n    window.chain = chainName\n\n    const {\n      txHash,\n      tokenId,\n      tokenAddress,\n      mintingAddress,\n      authSig\n    } = await mintLIT({ chain: window.chain, quantity: 1 })\n    window.tokenId = tokenId\n    window.tokenAddress = tokenAddress\n    window.authSig = authSig\n\n    return txHash\n}\n\nexport async function login(contractAddress: string, chainName: string, contractType: string=\"ERC1155\", numTokens: string=\"0\") {\n    try {\n        await getAuthSig(chainName);\n        await provisionAccess(contractAddress, chainName, contractType, numTokens);\n        await requestJwt(chainName);\n        console.log(\"You're logged in!\");\n        console.log(\"window.jwt\", window.jwt);\n        return true\n    } catch (e) {\n        console.log(\"Error\", e);\n        return false\n    }\n    // document.getElementById(\"authStatus\").innerText =\n    // \"You've been authenticated!\";\n    // await visitProtectedServer(window.jwt);\n}\n\nexport async function mintAndLogin(chainName: string, contractType: string=\"ERC1155\") {\n    try {\n        await getAuthSig(chainName);\n        const tx = await mintNft(chainName)\n        console.log(\"tx\", tx)\n        await provisionAccess2(contractType);\n        await requestJwt(chainName);\n        console.log(\"You're logged in!\");\n        console.log(\"window.jwt\", window.jwt);\n        return true\n    } catch (e) {\n        console.log(\"Error\", e);\n        return false\n    }\n}\n\nexport async function mintAndLoginAlgovera(chainName: string, tknId: any, price: string) {\n  try {\n    \n    const tokenAddress = getAddress(chainName)\n    const tx = await mintNftAlgovera(chainName, tknId, price)\n    await getAuthSig(chainName);\n    console.log(\"tx\", tx)\n    console.log(\"Provisioning Access 3\")\n    await provisionAccess3(\"ERC1155\", tokenAddress, tknId, chainName);\n    console.log(\"Requesting JWT\")\n    await requestJwt(chainName);\n    console.log(\"You're logged in!\");\n    console.log(\"window.jwt\", window.jwt);\n    return true\n  } catch (e) {\n      console.log(\"Error\", e);\n      return false\n  }\n}\n\n\n// End Lit Protocol Integration","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport * as ethers from \"ethers\"\nimport { encrypt, decrypt, login, mintAndLogin, initToken, mintAndLoginAlgovera } from \"./litComponent\"\nimport { readFileSync, writeFileSync, promises as fsPromises } from 'fs';\nimport { join } from 'path';\n\ninterface State {\n  walletAddress: string\n  transaction: string\n  isFocused: boolean\n  encryptedString: string\n  encryptedSymmetricKey: string\n  decryptedString: string\n  loggedIn: boolean\n  tokenId: any\n}\n\ndeclare global {\n  interface Window {\n    ethereum: any,\n    authSig: any,\n    resourceId: any,\n    accessControlConditions: any,\n    litNodeClient: any,\n    encryptedString: any,\n    jwt: any,\n    location: Location,\n    chain: any,\n    tokenId: any,\n    tokenAddress: any,\n  }\n}\ninterface Document {\n  authStatus: any,\n}\n\n\nasync function getAccount() {\n  var provider\n  var signer\n  provider = new ethers.providers.Web3Provider(window.ethereum, \"any\")\n  // Prompt user for account connections\n  const accounts = await window.ethereum.request({\n    method: 'eth_requestAccounts',\n  });\n  await provider.send(\"eth_requestAccounts\", [])\n  window.ethereum.on('accountsChanged', function (accounts: any) {\n    // Time to reload your interface with accounts[0]!\n  });  \n  signer = provider.getSigner()\n  signer = \"0\"\n  signer = provider.getSigner()\n  const address = await signer.getAddress()\n  return address\n}\n\nasync function sendToken(to_address: string,\n                        send_token_amount: string,\n                        contract_address: string = \"0x8967BCF84170c91B0d24D4302C2376283b0B3a07\") {\n  console.log(\"Sending OCEAN initiated\");\n\n  const contractAddress = contract_address;\n  const contractAbiFragment = [\n    {\n      name: \"transfer\",\n      type: \"function\",\n      inputs: [\n        {\n          name: \"_to\",\n          type: \"address\",\n        },\n        {\n          type: \"uint256\",\n          name: \"_tokens\",\n        },\n      ],\n      constant: false,\n      outputs: [\n        {\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      payable: false,\n    },\n  ];\n  console.log(\"Parameters defined\");\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  // Prompt user for account connections\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n\n  let contract = new ethers.Contract(contractAddress, contractAbiFragment, signer);\n  console.log(\"Contract defined\");\n  // How many tokens?\n  let numberOfTokens = ethers.utils.parseUnits(send_token_amount, 18);\n  console.log(`numberOfTokens: ${numberOfTokens}`);\n  console.log(\"Ready to transfer\");\n  // Send tokens\n  contract.transfer(to_address, numberOfTokens).then((transferResult: any) => {\n    console.dir(transferResult);\n    console.log(\"sent token\");\n  });\n  console.log(\"Done: see address below on etherscan\");\n  console.log(to_address);\n}\n\n// function syncWriteFile(filename: string, data: any) {\n//   /**\n//    * flags:\n//    *  - w = Open file for reading and writing. File is created if not exists\n//    *  - a+ = Open file for reading and appending. The file is created if not exists\n//    */\n//   writeFileSync(join(__dirname, filename), data, {\n//     flag: 'w',\n//   });\n\n//   const contents = readFileSync(join(__dirname, filename), 'utf-8');\n//   console.log(contents); // 👉️ \"One Two Three Four\"\n\n//   return contents;\n// }\n\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass WalletConnect extends StreamlitComponentBase<State> {\n  public state = { \n    walletAddress: \"not\", \n    transaction: \"\", \n    isFocused: false, \n    encryptedString: \"\", \n    encryptedSymmetricKey: \"\", \n    decryptedString: \"\", \n    loggedIn: false,\n    tokenId: \"\"\n  };\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `0px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      const backgroundColorStyling = `${this.state.isFocused ? \"#4F8BF9\" :  \"#FF4B4B\"}` // \n      style.border = borderStyling\n      style.outline = borderStyling\n      style.backgroundColor = backgroundColorStyling // \"#FF4B4B\"\n      style.color = \"white\"\n      style.borderRadius = \"0.2rem\"\n      style.height = \"2em\"\n      // style.width = \"3em\"\n    }\n\n    const message = this.props.args[\"message\"]\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onMouseOver={this._onFocus}\n          onMouseOut={this._onBlur}\n        >\n          {message}\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = async (): Promise<void> => {\n    if (this.props.args[\"key\"] === \"wallet\") {\n      const address = await getAccount()\n      this.setState(\n        () => ({ walletAddress: address }),\n        () => Streamlit.setComponentValue(this.state.walletAddress)\n      )\n    } else if (this.props.args[\"key\"] === \"send\") {\n        const tx: any = await sendToken(this.props.args[\"to_address\"], this.props.args[\"amount\"], this.props.args[\"contract_address\"])\n        // const tx: any = await send_token(this.props.args[\"contract_address\"], this.props.args[\"amount\"], this.props.args[\"to_address\"])\n        // const tx = await sendFixedPayment(String(this.props.args[\"amount\"]), this.props.args[\"to\"])\n        this.setState(\n          () => ({ transaction: tx }),\n          () => Streamlit.setComponentValue(this.state.transaction)\n        )\n    } else if (this.props.args[\"key\"] === \"encrypt\") {\n        const { encryptedRealString, encryptedSymmetricKey } = await encrypt(this.props.args[\"message_to_encrypt\"], this.props.args[\"chain_name\"])\n        // syncWriteFile('./example.txt', encryptedRealString);\n        // const sth = await getAuthSig()\n        // console.log(\"Connected Web3\", sth)\n        // console.log(\"encryptedString\", encryptedRealString)\n        // console.log(\"encryptedSymmetricKey\", encryptedSymmetricKey)\n        // const decryptedString = await decrypt(encryptedRealString, encryptedSymmetricKey)\n        // console.log(\"decryptedString\", decryptedString)\n        this.setState(\n          () => ({ encryptedString: encryptedRealString, encryptedSymmetricKey: encryptedSymmetricKey }),\n          () => Streamlit.setComponentValue({ encryptedRealString, encryptedSymmetricKey })\n        )\n    } else if (this.props.args[\"key\"] === \"decrypt\") {\n        const { decryptedString } = await decrypt(this.props.args[\"encrypted_string\"], this.props.args[\"encrypted_symmetric_key\"], this.props.args[\"chain_name\"])\n        this.setState(\n          () => ({ decryptedString: decryptedString }),\n          () => Streamlit.setComponentValue(decryptedString)\n        )\n        console.log(\"State of encrypted string3:\", this.state.encryptedString)\n    } else if (this.props.args[\"key\"] === \"login\") {\n        const lgn = await login(this.props.args[\"auth_token_contract_address\"], this.props.args[\"chain_name\"], this.props.args[\"contract_type\"], this.props.args[\"num_tokens\"])\n        this.setState(\n          () => ({ loggedIn: lgn }),\n          () => Streamlit.setComponentValue(lgn)\n        )\n    } else if (this.props.args[\"key\"] === \"mint_and_login\") {\n      const lgn = await mintAndLogin(this.props.args[\"chain_name\"], this.props.args[\"contract_type\"])\n      this.setState(\n        () => ({ loggedIn: lgn }),\n        () => Streamlit.setComponentValue(lgn)\n      )\n  } else if (this.props.args[\"key\"] === \"create_token\") {\n    const tknId = await initToken(this.props.args[\"price\"], this.props.args[\"supply\"], this.props.args[\"uri\"], this.props.args[\"chain_name\"])\n    console.log(\"Token ID: \", tknId)\n    this.setState(\n      () => ({ tokenId: tknId }),\n      () => Streamlit.setComponentValue(tknId)\n    )\n  } else if (this.props.args[\"key\"] === \"mint_and_login_algovera\") {\n    console.log(\"Token ID is: \",  this.props.args[\"token_id\"])\n    // const x = await testMintAlgovera(this.props.args[\"chain_name\"], this.props.args[\"token_id\"], this.props.args[\"price\"])\n    // UNCOMMENT CODE BELOW, ONLY FOR TESTING\n    const lgn = await mintAndLoginAlgovera(this.props.args[\"chain_name\"], this.props.args[\"token_id\"], this.props.args[\"price\"])\n    console.log(\"Logged in: \", lgn)\n    this.setState(\n      () => ({ loggedIn: lgn }),\n      () => Streamlit.setComponentValue(lgn)\n    )\n  }\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(WalletConnect)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}